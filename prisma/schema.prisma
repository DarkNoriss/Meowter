generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  email        String    @unique
  userlink     String    @unique
  bio          String?
  avatar       String
  createdAt    DateTime  @default(now())
  birthdayDate DateTime?

  meows    Meow[]
  replies  Reply[]
  likes    Like[]
  accounts Account[]
  sessions Session[]
}

model Meow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  text      String
  likes     Like[]
  replies   Reply[]
}

model Like {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @db.ObjectId
  meow    Meow?   @relation(fields: [meowId], references: [id], onDelete: Cascade)
  meowId  String? @db.ObjectId
  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String? @db.ObjectId
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  meow      Meow     @relation(fields: [meowId], references: [id], onDelete: Cascade)
  meowId    String   @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  likes     Like[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
